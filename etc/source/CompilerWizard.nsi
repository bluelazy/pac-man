;=#
; 
; PORTABLEAPPS COMPILER 
; Developed by daemon.devin
;
; For support visit the GitHub project:
; https://github.com/demondevin/pac-man
; 
; CompilerWizard.nsi
; Version 1.1
;

;= RUNTIME SWITCHES
;= ################
Unicode true 
ManifestDPIAware true
RequestExecutionLevel user

!define CustomIconAndName

;= NSIS VERSION
;= ################
!include RequireLatestNSIS.nsh

;= PAC DETAILS
;= ################
Name "PortableApps Compiler"
OutFile ..\..\PortableAppsCompiler.exe
Icon ..\..\app\AppInfo\appicon.ico
Caption "PortableApps Compiler"
VIProductVersion 3.0.0.0
VIAddVersionKey ProductName "PortableApps Compiler"
VIAddVersionKey Comments "A small utility for generating a portable wrapper for an application."
VIAddVersionKey CompanyName "How Dumb, LLC"
VIAddVersionKey LegalCopyright "Copyright daemon.devin"
VIAddVersionKey FileDescription "PortableApps Compiler"
VIAddVersionKey FileVersion 3.0.0.0
VIAddVersionKey ProductVersion 3.0.0.0
VIAddVersionKey InternalName "PortableApps Compiler"
VIAddVersionKey OriginalFilename PortableAppsCompiler.exe

;= COMPRESSION
;= ################
SetCompress Auto
SetCompressor /SOLID lzma
SetCompressorDictSize 32
SetDatablockOptimize On

;= INCLUDES/PLUGINS
;= ################
;(Standard)
!include FileFunc.nsh
!include LogicLib.nsh
!include MUI.nsh
;!include StrRep.nsh
!include NewTextReplace.nsh
!AddPluginDir Plugins
!include ReplaceInFileWithTextReplace.nsh

;= ICON & STYLE
;= ################
!define MUI_ICON "..\..\App\AppInfo\appicon.ico"
!define MUI_HEADERIMAGE
!define MUI_HEADERIMAGE_RIGHT
!define MUI_HEADERIMAGE_BITMAP header.bmp
BrandingText "PortableApps Compiler - Port And Let Portable!"
InstallButtonText "Go >" 
ShowInstDetails show
SubCaption 3 " | Compiling Portable Wrapper"

;= VARIABLES
;= ################
Var FINISHTEXT
Var FINISHTITLE
Var NSIS
Var PACKAGE
Var SKIPWELCOMEPAGE
Var AUTOMATICCOMPILE
Var DEFINES
Var ERROROCCURED
Var AppShortname
Var AppFullname
Var AppID
Var Name

;= PAGES
;= ################
!define MUI_WELCOMEFINISHPAGE_BITMAP welcomefinish.bmp
!define MUI_WELCOMEPAGE_TITLE "PortableApps Compiler"
!define MUI_WELCOMEPAGE_TEXT "Welcome to the PortableApps Compiler.\r\n\r\nThis utility is an advanced compiler which allows you to create a portable wrapper for an application which adheres to the PortableApps Compiler format specifications. Click next to start the compiling process."
!define MUI_PAGE_CUSTOMFUNCTION_PRE ShowWelcomeWindow
!insertmacro MUI_PAGE_WELCOME
Page custom ShowOptionsWindow LeaveOptionsWindow " | Portable App Folder Selection" 
Page instfiles
!define MUI_PAGE_CUSTOMFUNCTION_PRE ShowFinishPage
!define MUI_FINISHPAGE_TITLE "$FINISHTITLE"
!define MUI_FINISHPAGE_TEXT "$FINISHTEXT"
!define MUI_FINISHPAGE_RUN
!define MUI_FINISHPAGE_RUN_NOTCHECKED
!define MUI_FINISHPAGE_RUN_TEXT "Test Wrapper"
!define MUI_FINISHPAGE_RUN_FUNCTION "RunOnFinish"
!define MUI_FINISHPAGE_SHOWREADME "$EXEDIR\bin\PortableAppsCompilerLog.txt"
!define MUI_FINISHPAGE_SHOWREADME_NOTCHECKED
!define MUI_FINISHPAGE_SHOWREADME_TEXT "Review Log"
!insertmacro MUI_PAGE_FINISH

;= DEFINITIONS
;= ################
!define NEWLINE		"$\r$\n"
!define EXTENDED	"$PACKAGE\App\AppInfo\ExtendedWrapper.nsh"
!define CWRAPPER	"$PACKAGE\App\AppInfo\CompilerWrapper.ini"
!define DEFINES		"$EXEDIR\etc\Source\PortableAppsCompilerDefines.nsh"
!define DEFSTART	";=# ${NEWLINE}; ${NEWLINE}; PORTABLEAPPS COMPILER${NEWLINE}; Developed by daemon.devin${NEWLINE}; ${NEWLINE}; For support visit the GitHub project:${NEWLINE}; https://github.com/demondevin/pac-man${NEWLINE}; ${NEWLINE}; PortableAppsCompilerDefines.nsh${NEWLINE}; This file was automatically generated by the PortableApps Compiler and should not be edited!${NEWLINE}; ${NEWLINE}"

;= MACROS
;= ################
!define ReadAppInfoConfig `!insertmacro _ReadAppInfoConfig`
!macro _ReadAppInfoConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `${_}\App\AppInfo\AppInfo.ini` `${_SECTION}` `${_KEY}`
!macroend
!define ReadWrapperConfig `!insertmacro _ReadWrapperConfig`
!macro _ReadWrapperConfig _VALUE _SECTION _KEY
	ReadINIStr ${_VALUE} `${_}\App\AppInfo\CompilerWrapper.ini` `${_SECTION}` `${_KEY}`
!macroend
!define WriteDefineConfig "!insertmacro _WriteDefineConfig"
!macro _WriteDefineConfig _DEFINE _VALUE
	!if ! "${_VALUE}" == ""
		FileWrite $DEFINES "!define ${_DEFINE} `${_VALUE}`${NEWLINE}"
	!else 
		FileWrite $DEFINES "!define ${_DEFINE}${NEWLINE}"
	!endif
!macroend
!define AddConditionIfNot "!insertmacro _AddConditionIfNot"
!macro _AddConditionIfNot _DEFINE
	FileWrite $DEFINES `!ifndef ${_DEFINE}${NEWLINE}$\t!define ${_DEFINE}${NEWLINE}!endif${NEWLINE}`
!macroend
!define WriteErrorLog "!insertmacro _WriteErrorLog"
!macro _WriteErrorLog _ERROR
	FileOpen $9 "$EXEDIR\bin\PortableAppsCompilerLog.txt" a
	FileSeek $9 0 END
	FileWrite $9 `ERROR: ${_ERROR}`
	FileWriteByte $9 "13"
	FileWriteByte $9 "10"
	FileClose $9
	StrCpy $ERROROCCURED "true"
!macroend
!define ConvertPath "!insertmacro _ConvertPath"
!macro _ConvertPath _SOURCE _TARGET
	${If} ${FileExists} "$PACKAGE\${_SOURCE}"
		DetailPrint "${_SOURCE} -> ${_TARGET}"
		SetDetailsPrint none
		Rename "$PACKAGE\${_SOURCE}" "$PACKAGE\${_TARGET}"
		SetDetailsPrint lastused
	${EndIf}
!macroend
!define StringConvertInFile `!insertmacro _StringConvertInFile`
!macro _StringConvertInFile _FILE _SEARCH _REPLACE
	FileOpen $R8 ${_FILE} r
	FileReadWord $R8 $R7
	FileClose $R8
	SetDetailsPrint none
	${If} $R7 = 0xFEFF
		${ReplaceInFileUTF16LE} ${_FILE} ${_SEARCH} ${_REPLACE}
	${Else}
		${ReplaceInFile} ${_FILE} ${_SEARCH} ${_REPLACE}
	${EndIf}
	SetDetailsPrint lastused
!macroend

;= LANGUAGES
;= ################
!insertmacro MUI_LANGUAGE "English"

;= FUNCTIONS
;= ################
Function .onInit
	!insertmacro MUI_INSTALLOPTIONS_EXTRACT "CompilerWizardForm.ini"
	SetOutPath $EXEDIR
	
	CreateDirectory $EXEDIR\bin
	
	ReadINIStr $SKIPWELCOMEPAGE $EXEDIR\bin\settings.ini CompilerWizard SkipWelcomePage
	ReadINIStr $0 $EXEDIR\bin\settings.ini CompilerWizard Drive
	ReadINIStr $PACKAGE $EXEDIR\bin\settings.ini CompilerWizard Package
	; Update drive letter; doesn't matter if $0 == ""
	StrLen $1 $0
	StrCpy $2 $PACKAGE $1
	${If} $2 == $0
		StrCpy $PACKAGE $PACKAGE "" $1
		StrCpy $PACKAGE $0$PACKAGE
	${EndIf}

	;StrCpy $NSIS "$EXEDIR\App\NSIS\makensis.exe"
	ReadINIStr $NSIS $EXEDIR\bin\settings.ini CompilerWizard makensis
	${If} $NSIS == ""
		StrCpy $NSIS ..\NSISPortable\App\NSIS\makensis.exe
		WriteINIStr $EXEDIR\bin\settings.ini CompilerWizard makensis $NSIS
	${EndIf}	

	${GetParameters} $R0
	StrCmp $R0 "" PreFillForm
		StrCpy $PACKAGE $R0
		StrCpy $SKIPWELCOMEPAGE "true"
		StrCpy $AUTOMATICCOMPILE "true"
		;Strip quotes from $PACKAGE
		StrCpy $R0 $PACKAGE 1
		StrCmp $R0 `"` "" PreFillForm
		StrCpy $PACKAGE $PACKAGE "" 1
		StrCpy $PACKAGE $PACKAGE -1

	PreFillForm:
		;=== Pre-Fill Path with Directory
		WriteINIStr $PLUGINSDIR\CompilerWizardForm.ini "Field 2" "State" "$PACKAGE"
FunctionEnd

Function ShowWelcomeWindow
	StrCmp $SKIPWELCOMEPAGE "true" "" ShowWelcomeWindowEnd
		Abort
	ShowWelcomeWindowEnd:
FunctionEnd

Function ShowOptionsWindow
	!insertmacro MUI_HEADER_TEXT "PortableApps Compiler" "a better alternative to PA.c Launcher"
	${IfThen} $AUTOMATICCOMPILE == "true" ${|} Abort ${|}
	InstallOptions::InitDialog /NOUNLOAD "$PLUGINSDIR\CompilerWizardForm.ini"
    Pop $0
    InstallOptions::Show
FunctionEnd

Function LeaveOptionsWindow
	ReadINIStr $PACKAGE $PLUGINSDIR\CompilerWizardForm.ini "Field 2" "State"

	${If} $PACKAGE == ""
		MessageBox MB_OK|MB_ICONEXCLAMATION `Please select a valid base directory to create a wrapper for.`
		Abort
	${EndIf}
	${GetRoot} $EXEDIR $0
	WriteINIStr $EXEDIR\bin\settings.ini CompilerWizard Drive $0
	WriteINIStr $EXEDIR\bin\settings.ini CompilerWizard Package $PACKAGE
FunctionEnd

Function ConvertLanguageEnvironmentVariables
	Pop $9 # file

	FileOpen $8 $9 r
	FileReadWord $8 $7
	FileClose $8

	SetDetailsPrint none
	${If} $7 = 0xFEFF
		; Convert old PAL to PAC
		${ReplaceInFileUTF16LE} $9 PortableApps.comLanguageCode  PAC:LanguageCode
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleCode2   PAC:LanguageCode2
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleCode3   PAC:LanguageCode3
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleGlibc   PAC:LanguageGlibc
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleWinName PAC:LanguageNSIS
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleName    PAC:LanguageName
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleID      PAC:LanguageLCID
		; Convert new PAL to PAC
		${ReplaceInFileUTF16LE} $9 PAL:LanguageCode  PAC:LanguageCode
		${ReplaceInFileUTF16LE} $9 PAL:LocaleCode2   PAC:LanguageCode2
		${ReplaceInFileUTF16LE} $9 PAL:LocaleCode3   PAC:LanguageCode3
		${ReplaceInFileUTF16LE} $9 PAL:LocaleGlibc   PAC:LanguageGlibc
		${ReplaceInFileUTF16LE} $9 PAL:LocaleWinName PAC:LanguageNSIS
		${ReplaceInFileUTF16LE} $9 PAL:LocaleName    PAC:LanguageName
		${ReplaceInFileUTF16LE} $9 PAL:LocaleID      PAC:LanguageLCID
	${Else}
		; Convert old PAL to PAC
		${ReplaceInFile} $9 PortableApps.comLanguageCode  PAC:LanguageCode
		${ReplaceInFile} $9 PortableApps.comLocaleCode2   PAC:LanguageCode2
		${ReplaceInFile} $9 PortableApps.comLocaleCode3   PAC:LanguageCode3
		${ReplaceInFile} $9 PortableApps.comLocaleGlibc   PAC:LanguageGlibc
		${ReplaceInFile} $9 PortableApps.comLocaleWinName PAC:LanguageNSIS
		${ReplaceInFile} $9 PortableApps.comLocaleName    PAC:LanguageName
		${ReplaceInFile} $9 PortableApps.comLocaleID      PAC:LanguageLCID
		; Convert new PAL to PAC
		${ReplaceInFile} $9 PAL:LanguageCode  PAC:LanguageCode
		${ReplaceInFile} $9 PAL:LocaleCode2   PAC:LanguageCode2
		${ReplaceInFile} $9 PAL:LocaleCode3   PAC:LanguageCode3
		${ReplaceInFile} $9 PAL:LocaleGlibc   PAC:LanguageGlibc
		${ReplaceInFile} $9 PAL:LocaleWinName PAC:LanguageNSIS
		${ReplaceInFile} $9 PAL:LocaleName    PAC:LanguageName
		${ReplaceInFile} $9 PAL:LocaleID      PAC:LanguageLCID
	${EndIf}
	SetDetailsPrint lastused
FunctionEnd

Function ConvertDefines
	Pop $9 # file

	FileOpen $8 $9 r
	FileReadWord $8 $7
	FileClose $8

	SetDetailsPrint none
	StrCpy $0 $${
	${If} $7 = 0xFEFF
		${ReplaceInFileUTF16LE} $9 PortableApps.comLanguageCode		PortableAppsLanguageCode
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleCode2		PortableAppsLocaleCode2
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleCode3		PortableAppsLocaleCode3
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleGlibc		PortableAppsLocaleGlibc
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleWinName	PortableAppsLocaleWinName
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleName		PortableAppsLocaleName
		${ReplaceInFileUTF16LE} $9 PortableApps.comLocaleID			PortableAppsLocaleID
		${ReplaceInFileUTF16LE} $9 $0ReadUser}						$0ReadUserConfig}
		${ReplaceInFileUTF16LE} $9 $0LAUNCHER}						$0WRAPPER}
		${ReplaceInFileUTF16LE} $9 $0LAUNCHER2}						$0WRAPPER2}
		${ReplaceInFileUTF16LE} $9 $0OTHER}							$0ETC}
		${ReplaceInFileUTF16LE} $9 $0SETINI}						$0CONFIGINI}
		${ReplaceInFileUTF16LE} $9 $0PAL}							$0PAC}
		${ReplaceInFileUTF16LE} $9 $0DEFSET}						$0DEFCONF}
		${ReplaceInFileUTF16LE} $9 $0SET}							$0CONF}
		${ReplaceInFileUTF16LE} $9 $0DEFDATA}						$0DEFSET}
		${ReplaceInFileUTF16LE} $9 $0DATA}							$0SET}
		${ReplaceInFileUTF16LE} $9 $0ReadLauncherConfig}			$0ReadWrapperConfig}
		${ReplaceInFileUTF16LE} $9 $0WriteLauncherConfig}			$0WriteWrapperConfig}
		${ReplaceInFileUTF16LE} $9 $0DeleteLauncherConfig}			$0DeleteWrapperConfig}
		${ReplaceInFileUTF16LE} $9 $0DeleteLauncherConfigSec}		$0DeleteWrapperConfigSec}
		${ReplaceInFileUTF16LE} $9 $0ReadLauncherConfigWithDefault}	$0ReadWrapperConfigWithDefault}
		${ReplaceInFileUTF16LE} $9 $0PAF}							$0TREE}
		${ReplaceInFileUTF16LE} $9 $0PAFKEYS}						$0TREEKEYS}		
		${ReplaceInFileUTF16LE} $9 PAL:LanguageCode					PAC:LanguageCode
		${ReplaceInFileUTF16LE} $9 PAL:LocaleCode2					PAC:LanguageCode2
		${ReplaceInFileUTF16LE} $9 PAL:LocaleCode3					PAC:LanguageCode3
		${ReplaceInFileUTF16LE} $9 PAL:LocaleGlibc					PAC:LanguageGlibc
		${ReplaceInFileUTF16LE} $9 PAL:LocaleWinName				PAC:LanguageNSIS
		${ReplaceInFileUTF16LE} $9 PAL:LocaleName					PAC:LanguageName
		${ReplaceInFileUTF16LE} $9 PAL:LocaleID						PAC:LanguageLCID
	${Else}
		${ReplaceInFile} $9 PortableApps.comLanguageCode		PortableAppsLanguageCode
		${ReplaceInFile} $9 PortableApps.comLocaleCode2			PortableAppsLocaleCode2
		${ReplaceInFile} $9 PortableApps.comLocaleCode3			PortableAppsLocaleCode3
		${ReplaceInFile} $9 PortableApps.comLocaleGlibc			PortableAppsLocaleGlibc
		${ReplaceInFile} $9 PortableApps.comLocaleWinName		PortableAppsLocaleWinName
		${ReplaceInFile} $9 PortableApps.comLocaleName			PortableAppsLocaleName
		${ReplaceInFile} $9 PortableApps.comLocaleID			PortableAppsLocaleID
		${ReplaceInFile} $9 $0ReadUser}							$0ReadUserConfig}
		${ReplaceInFile} $9 $0LAUNCHER}							$0WRAPPER}
		${ReplaceInFile} $9 $0LAUNCHER2}						$0WRAPPER2}
		${ReplaceInFile} $9 $0OTHER}							$0ETC}
		${ReplaceInFile} $9 $0SETINI}							$0CONFIGINI}
		${ReplaceInFile} $9 $0PAL}								$0PAC}
		${ReplaceInFile} $9 $0DEFSET}							$0DEFCONF}
		${ReplaceInFile} $9 $0SET}								$0CONF}
		${ReplaceInFile} $9 $0DEFDATA}							$0DEFSET}
		${ReplaceInFile} $9 $0DATA}								$0SET}
		${ReplaceInFile} $9 $0ReadLauncherConfig}				$0ReadWrapperConfig}
		${ReplaceInFile} $9 $0WriteLauncherConfig}				$0WriteWrapperConfig}
		${ReplaceInFile} $9 $0DeleteLauncherConfig}				$0DeleteWrapperConfig}
		${ReplaceInFile} $9 $0DeleteLauncherConfigSec}			$0DeleteWrapperConfigSec}
		${ReplaceInFile} $9 $0ReadLauncherConfigWithDefault}	$0ReadWrapperConfigWithDefault}
		${ReplaceInFile} $9 $0PAF}								$0TREE}
		${ReplaceInFile} $9 $0PAFKEYS}							$0TREEKEYS}		
		${ReplaceInFile} $9 PAL:LanguageCode					PAC:LanguageCode
		${ReplaceInFile} $9 PAL:LocaleCode2						PAC:LanguageCode2
		${ReplaceInFile} $9 PAL:LocaleCode3						PAC:LanguageCode3
		${ReplaceInFile} $9 PAL:LocaleGlibc						PAC:LanguageGlibc
		${ReplaceInFile} $9 PAL:LocaleWinName					PAC:LanguageNSIS
		${ReplaceInFile} $9 PAL:LocaleName						PAC:LanguageName
		${ReplaceInFile} $9 PAL:LocaleID						PAC:LanguageLCID
	${EndIf}
	SetDetailsPrint lastused
FunctionEnd

Section Main
	${IfNot} ${FileExists} $NSIS
		StrCpy $ERROROCCURED true
		${WriteErrorLog} "NSIS not found at $NSIS."
		MessageBox MB_ICONSTOP "NSIS was not found! (Looked for it in $NSIS)${NEWLINE}${NEWLINE}You can specify a custom path to makensis.exe in $EXEDIR\bin\settings.ini, [CompilerWizard]:makensis"
		Abort
	${EndIf}

	; Fix the package path, if necessary
	StrCpy $R1 $PACKAGE 1 -1
	${IfThen} $R1 == "\" ${|} StrCpy $PACKAGE $PACKAGE -1 ${|}

	SetDetailsPrint ListOnly
	DetailPrint "App: $PACKAGE"
	DetailPrint " "
	RealProgress::SetProgress /NOUNLOAD 0
	RealProgress::GradualProgress /NOUNLOAD 1 20 90 "Processing complete."

	; Convert from PAF to PAC needs to be done..
	${If}   ${FileExists} "$PACKAGE\App\AppInfo\Launcher\Custom.nsh"
	${OrIf} ${FileExists} "$PACKAGE\App\AppInfo\Launcher\Debug.nsh"
		DetailPrint "Converting package from PAF to PAC..."
		${ConvertPath} "App\AppInfo\Launcher\Custom.nsh" "App\AppInfo\ExtendedWrapper.nsh"
		${ConvertPath} "App\AppInfo\Launcher\Debug.nsh" "App\AppInfo\ExtendedDebug.nsh"
		${ConvertPath} "App\AppInfo\installer.ini" "App\AppInfo\CompilerInstaller.ini"
		
		; Replace old defines to new defines | i.e. ${LAUNCHER} -> ${WRAPPER}
		; Check if it's UTF-16LE
		; FileOpen $0 "${EXTENDED}" r
		; FileReadWord $0 $1
		; FileClose $0
		; StrCpy $0 $${
		; ${If} $1 = 0xFEFF
			; ${If} $5 == UTF-16LE
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0ReadUser} $0ReadUserConfig}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0LAUNCHER} $0WRAPPER}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0LAUNCHER2} $0WRAPPER2}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0OTHER} $0ETC}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0SETINI} $0CONFIGINI}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0PAL} $0PAC}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0DEFSET} $0DEFCONF}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0DEFDATA} $0DEFSET}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0ReadLauncherConfig} $0ReadWrapperConfig}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0WriteLauncherConfig} $0WriteWrapperConfig}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0DeleteLauncherConfig} $0DeleteWrapperConfig}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0DeleteLauncherConfigSec} $0DeleteWrapperConfigSec}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0ReadLauncherConfigWithDefault} $0ReadWrapperConfigWithDefault}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0PAF} $0TREE}
				; ${ReplaceInFileUTF16LECS} "${EXTENDED}" $0PAFKEYS} $0TREEKEYS}
			; ${Else}
				; ${ReplaceInFileCS} "${EXTENDED}" $0ReadUser} $0ReadUserConfig}
				; ${ReplaceInFileCS} "${EXTENDED}" $0LAUNCHER} $0WRAPPER}
				; ${ReplaceInFileCS} "${EXTENDED}" $0LAUNCHER2} $0WRAPPER2}
				; ${ReplaceInFileCS} "${EXTENDED}" $0OTHER} $0ETC}
				; ${ReplaceInFileCS} "${EXTENDED}" $0SETINI} $0CONFIGINI}
				; ${ReplaceInFileCS} "${EXTENDED}" $0PAL} $0PAC}
				; ${ReplaceInFileCS} "${EXTENDED}" $0DEFSET} $0DEFCONF}
				; ${ReplaceInFileCS} "${EXTENDED}" $0DEFDATA} $0DEFSET}
				; ${ReplaceInFileCS} "${EXTENDED}" $0ReadLauncherConfig} $0ReadWrapperConfig}
				; ${ReplaceInFileCS} "${EXTENDED}" $0WriteLauncherConfig} $0WriteWrapperConfig}
				; ${ReplaceInFileCS} "${EXTENDED}" $0DeleteLauncherConfig} $0DeleteWrapperConfig}
				; ${ReplaceInFileCS} "${EXTENDED}" $0DeleteLauncherConfigSec} $0DeleteWrapperConfigSec}
				; ${ReplaceInFileCS} "${EXTENDED}" $0ReadLauncherConfigWithDefault} $0ReadWrapperConfigWithDefault}
				; ${ReplaceInFileCS} "${EXTENDED}" $0PAF} $0TREE}
				; ${ReplaceInFileCS} "${EXTENDED}" $0PAFKEYS} $0TREEKEYS}
			; ${EndIf}
		; ${EndIf}
		; StrCpy $0 $${
		; ${StringRIP} "${EXTENDED}" "$0ReadUser}" "$0ReadUserConfig}"
		; ${StringRIP} "${EXTENDED}" "$0ReadUser}" "$0ReadUserConfig}"
		; ${StringRIP} "${EXTENDED}" "$0LAUNCHER}" "$0WRAPPER}"
		; ${StringRIP} "${EXTENDED}" "$0LAUNCHER2}" "$0WRAPPER2}"
		; ${StringRIP} "${EXTENDED}" "$0OTHER}" "$0ETC}"
		; ${StringRIP} "${EXTENDED}" "$0SETINI}" "$0CONFIGINI}"
		; ${StringRIP} "${EXTENDED}" "$0PAL}" "$0PAC}"
		; ${StringRIP} "${EXTENDED}" "$0DEFSET}" "$0DEFCONF}"
		; ${StringRIP} "${EXTENDED}" "$0DEFDATA}" "$0DEFSET}"
		; ${StringRIP} "${EXTENDED}" "$0ReadLauncherConfig}" "$0ReadWrapperConfig}"
		; ${StringRIP} "${EXTENDED}" "$0WriteLauncherConfig}" "$0WriteWrapperConfig}"
		; ${StringRIP} "${EXTENDED}" "$0DeleteLauncherConfig}" "$0DeleteWrapperConfig}"
		; ${StringRIP} "${EXTENDED}" "$0DeleteLauncherConfigSec}" "$0DeleteWrapperConfigSec}"
		; ${StringRIP} "${EXTENDED}" "$0ReadLauncherConfigWithDefault}" "$0ReadWrapperConfigWithDefault}"
		; ${StringRIP} "${EXTENDED}" "$0PAF}" "$0TREE}"
		; ${StringRIP} "${EXTENDED}" "$0PAFKEYS}" "$0TREEKEYS}"
		; ${StringRIP} "${CWRAPPER}" "$0ReadUser}" "$0ReadUserConfig}"
		; ${StringRIP} "${CWRAPPER}" "$0ReadUser}" "$0ReadUserConfig}"
		; ${StringRIP} "${CWRAPPER}" "$0LAUNCHER}" "$0WRAPPER}"
		; ${StringRIP} "${CWRAPPER}" "$0LAUNCHER2}" "$0WRAPPER2}"
		; ${StringRIP} "${CWRAPPER}" "$0OTHER}" "$0ETC}"
		; ${StringRIP} "${CWRAPPER}" "$0SETINI}" "$0CONFIGINI}"
		; ${StringRIP} "${CWRAPPER}" "$0PAL}" "$0PAC}"
		; ${StringRIP} "${CWRAPPER}" "$0DEFSET}" "$0DEFCONF}"
		; ${StringRIP} "${CWRAPPER}" "$0DEFDATA}" "$0DEFSET}"
		; ${StringRIP} "${CWRAPPER}" "$0ReadLauncherConfig}" "$0ReadWrapperConfig}"
		; ${StringRIP} "${CWRAPPER}" "$0WriteLauncherConfig}" "$0WriteWrapperConfig}"
		; ${StringRIP} "${CWRAPPER}" "$0DeleteLauncherConfig}" "$0DeleteWrapperConfig}"
		; ${StringRIP} "${CWRAPPER}" "$0DeleteLauncherConfigSec}" "$0DeleteWrapperConfigSec}"
		; ${StringRIP} "${CWRAPPER}" "$0ReadLauncherConfigWithDefault}" "$0ReadWrapperConfigWithDefault}"
		; ${StringRIP} "${CWRAPPER}" "$0PAF}" "$0TREE}"
		; ${StringRIP} "${CWRAPPER}" "$0PAFKEYS}" "$0TREEKEYS}"
		; DetailPrint " "
	${EndIf}

	; Check if any conversion needs to be done from PAL to PAC
	; DetailPrint "Converting PAL to PAC..."
	; Replace the PA.c language environment variables with their PAC counterparts
	Push "${CWRAPPER}"
	Call ConvertLanguageEnvironmentVariables
	Push "${EXTENDED}"
	Call ConvertDefines
	; FindFirst $0 $1 "$PACKAGE\App\AppInfo\*.ini"
	; ${DoUntil} $1 == ""
		; Push "$PACKAGE\App\AppInfo\$1"
		; Call ConvertLanguageEnvironmentVariables
		; FindNext $0 $1
	; ${Loop}
	; FindClose $0
	DetailPrint " "
	
	DetailPrint "Compiling portable wrapper..."
	SetDetailsPrint none
	
	Delete "$EXEDIR\bin\PortableAppsCompilerLog.txt"

	Delete "${DEFINES}"

	!ifdef CustomIconAndName
		!define _ $PACKAGE
	!else
		!define _ $EXEDIR
	!endif
	
	Delete "${DEFINES}"
	
	; Read/write the needed defines to PortableAppsCompilerDefines.nsh
	FileOpen $DEFINES "${DEFINES}" a
	FileSeek $DEFINES 0 END
	FileWrite $DEFINES `${DEFSTART}`
	
	${IfNot} ${FileExists} "${_}\App\AppInfo\AppInfo.ini"
		StrCpy $ERROROCCURED true
		${WriteErrorLog} "${_}\App\AppInfo\AppInfo.ini doesn't exist!"
	${Else}
		; ${ReadAppInfoConfig} $0 "Section" "Key"
		; ${WriteDefineConfig} "Define" "Value"
		ClearErrors
		${ReadAppInfoConfig} $Name "Details" "Name"
		${WriteDefineConfig} "PORTABLEAPPNAME" "$Name"
		StrCpy $AppFullname $Name -9
		${WriteDefineConfig} "FULLNAME" "$AppFullname"
		
		${ReadAppInfoConfig} $AppID "Details" "AppID"
		${WriteDefineConfig} "APPNAME" "$AppID"
		StrCpy $AppShortname $AppID -8
		${WriteDefineConfig} "APP" "$AppShortname"
		${WriteDefineConfig} "APPDIR" "$$EXEDIR\bin\$${APP}"
		${WriteDefineConfig} "APP64" "$AppShortname64"
		${WriteDefineConfig} "APPDIR64" "$$EXEDIR\bin\$${APP64}"

		${ReadAppInfoConfig} $1 "Version" "PackageVersion"
		${WriteDefineConfig} "PACKAGE_VERSION" "$1"

		${If} ${Errors}
			StrCpy $ERROROCCURED true
			${WriteErrorLog} "[Details]:Name [Details]:AppID or [Version]:PackageVersion not found in appinfo.ini files"
		${Else}
			;Delete existing installer if there is one
			Delete "$PACKAGE\$AppID.exe"
			${If} ${FileExists} "$PACKAGE\$AppID.exe"
				StrCpy $ERROROCCURED true
				${WriteErrorLog} "ERROR: Cannot remove $PACKAGE\$AppID.exe! Is $AppID currently running?"
			${EndIf}
		${EndIf}

		ClearErrors
		${ReadAppInfoConfig} $0 "Team" "Developer"
		${If} $0 == "demon.devin"
			StrCpy $0 "daemon.devin"
		${EndIf}
		${WriteDefineConfig} "DEVELOPER" "$0"				
		ClearErrors
		${ReadAppInfoConfig} $0 "Team" "Contributors"
		${IfNot} ${Errors}
			${WriteDefineConfig} "CONTRIBUTORS" "$0"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Details" "Publisher"
		${IfNot} ${Errors}
			${WriteDefineConfig} "PUBLISHER" "$0"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Details" "Trademarks"
		${IfNot} ${Errors}
			${WriteDefineConfig} "TRADEMARK" "$0"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Control" "Start"
		${IfNot} ${Errors}
			${WriteDefineConfig} "OUTFILE" "$0"
		${EndIf}		
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "UsesDotNetVersion"
		${IfNot} ${Errors}
			${If} $0 != false
				${WriteDefineConfig} "DOTNET" ""
			${EndIf}
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "UseStdUtils"
		${IfNot} ${Errors}
			${WriteDefineConfig} "UseStdUtils" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "INF_Install"
		${IfNot} ${Errors}
			${WriteDefineConfig} "INF_Install" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "RegistryValueWrite"
		${IfNot} ${Errors}
			${WriteDefineConfig} "RegSleep" "50"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "FileWriteReplace"
		${IfNot} ${Errors}
			${WriteDefineConfig} "REPLACE" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "CloseWindow"
		${IfNot} ${Errors}
			${WriteDefineConfig} "CloseWindow" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "FileLocking"
		${IfNot} ${Errors}
			${WriteDefineConfig} "IsFileLocked" ""
			${AddConditionIfNot} "CloseWindow"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "Firewall"
		${IfNot} ${Errors}
			${WriteDefineConfig} "FIREWALL" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "Junctions"
		${IfNot} ${Errors}
			${WriteDefineConfig} "NTFS" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "ACLRegSupport"
		${IfNot} ${Errors}
			${WriteDefineConfig} "ACL" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "ACLDirSupport"
		${IfNot} ${Errors}
			${WriteDefineConfig} "ACL_DIR" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "RMEmptyDir"
		${IfNot} ${Errors}
			${WriteDefineConfig} "RMEMPTYDIRECTORIES" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "LocalLow"
		${IfNot} ${Errors}
			${WriteDefineConfig} "LocalLow" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "PublicDoc"
		${IfNot} ${Errors}
			${WriteDefineConfig} "PublicDoc" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "CompareVersions"
		${IfNot} ${Errors}
			${WriteDefineConfig} "CompareVersions" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "ConfigFunctions"
		${IfNot} ${Errors}
			${WriteDefineConfig} "ConFunc" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "JSONSupport"
		${IfNot} ${Errors}
			${WriteDefineConfig} "JSON" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "RestartSleep"
		${IfNot} ${Errors}
			${WriteDefineConfig} "Sleep" "$0"
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "WinMessages"
		${IfNot} ${Errors}
			${WriteDefineConfig} "Include_WinMessages" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "LineWrite"
		${IfNot} ${Errors}
			${WriteDefineConfig} "Include_LineWrite" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "TrimString"
		${IfNot} ${Errors}
			${WriteDefineConfig} "TrimString" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "CloseProcess"
		${IfNot} ${Errors}
			${WriteDefineConfig} "CloseProc" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "Include64"
		${IfNot} ${Errors}
			${WriteDefineConfig} "64.nsh" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "IncludeWordRep"
		${IfNot} ${Errors}
			${WriteDefineConfig} "Include_WordRep" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "GetBetween"
		${IfNot} ${Errors}
			${WriteDefineConfig} "GetBetween.nsh" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "DisableLanguageCustom"
		${IfNot} ${Errors}
			${WriteDefineConfig} "DisablePAC:LanguageCustom" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "DisableProgramExecSegment"
		${IfNot} ${Errors}
			${WriteDefineConfig} "DisableProgramExecSegment" ""
		${EndIf}
		ClearErrors
		${ReadAppInfoConfig} $0 "Dependencies" "TLB_FUNCTION"
		${IfNot} ${Errors}
			${WriteDefineConfig} "TLB_FUNCTION" ""
		${EndIf}
		
	${EndIf}
	
	${If} ${FileExists} "$PACKAGE\App\AppInfo\Launcher\$AppID.ini"
		${ConvertPath} "App\AppInfo\Launcher\$AppID.ini" "App\AppInfo\CompilerWrapper.ini"
		RMDir /r "$PACKAGE\App\AppInfo\Launcher"
	${EndIf}
	${If} ${FileExists} "$PACKAGE\App\$AppShortname\*.*"
		CopyFiles /SILENT "$PACKAGE\App\$AppShortname" "$PACKAGE\bin\$AppShortname"
		RMDir /r "$PACKAGE\App\$AppShortname"
	${EndIf}
	${If} ${FileExists} "$PACKAGE\App\$AppShortname64\*.*"
		CopyFiles /SILENT "$PACKAGE\App\$AppShortname64" "$PACKAGE\bin\$AppShortname64"
		RMDir /r "$PACKAGE\App\$AppShortname64"
	${EndIf}
	${If} ${FileExists} "$PACKAGE\App\DefaultData\*.*"
		${If} ${FileExists} "$PACKAGE\App\DefaultData\settings\*.*"
			Rename "$PACKAGE\App\DefaultData\settings" "$PACKAGE\App\DefaultData\Config"
		${EndIf}
		Rename "$PACKAGE\App\DefaultData" "$PACKAGE\App\DefaultSettings"
	${EndIf}
	${If} ${FileExists} "$PACKAGE\Data\*.*"
		${If} ${FileExists} "$PACKAGE\Data\settings\*.*"
			Rename "$PACKAGE\Data\settings" "$PACKAGE\Data\Config"
		${EndIf}
		CopyFiles /SILENT "$PACKAGE\Data" "$PACKAGE\bin\Settings"
		RMDir /r "$PACKAGE\Data"
	${EndIf}

	${StringConvertInFile} "$PACKAGE\bin\Settings\Config\$AppIDSettings.ini" PAL: PAC:
	${StringConvertInFile} "$PACKAGE\bin\Settings\Config\$AppIDSettings.ini" PortableApps.comLauncher PortableAppsCompiler
	${StringConvertInFile} "${CWRAPPER}" %PAL: %PAC:
	${StringConvertInFile} "${CWRAPPER}" PortableApps.comLauncher PortableAppsCompiler
	${StringConvertInFile} "${CWRAPPER}" PortableApps.com PortableApps

	${IfNot} ${FileExists} "${_}\App\AppInfo\CompilerWrapper.ini"
		StrCpy $ERROROCCURED true
		${WriteErrorLog} "${_}\App\AppInfo\CompilerWrapper.ini doesn't exist!"
	${Else}
		ClearErrors
		${ReadWrapperConfig} $0 "Launch" "RunAsAdmin"
        ${IfNot} ${Errors}
			${If} $0 == "try"
			${OrIf} $0 == "force"
			${OrIf} $0 == "compile-force"
				${WriteDefineConfig} "UAC" ""
			${EndIf}
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Registry"
		${IfNot} ${Errors}
			${WriteDefineConfig} "REGISTRY" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "RegRedirection"
		${IfNot} ${Errors}
			${WriteDefineConfig} "DISABLEFSR" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "RegCopyKeys"
		${IfNot} ${Errors}
			${WriteDefineConfig} "RegCopy" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Redirection"
		${IfNot} ${Errors}
			${WriteDefineConfig} "SYSTEMWIDE_DISABLEREDIR" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "ForceRedirection"
		${IfNot} ${Errors}
			${WriteDefineConfig} "FORCE_SYSTEMWIDE_DISABLEREDIR" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "ExecAsUser"
		${IfNot} ${Errors}
			${WriteDefineConfig} "ExecAsUser" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Services"
		${IfNot} ${Errors}
			${WriteDefineConfig} "SERVICES" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "RegDLLs"
		${IfNot} ${Errors}
			${WriteDefineConfig} "REGISTERDLL" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Tasks"
		${IfNot} ${Errors}
			${WriteDefineConfig} "TaskCleanUp" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Java"
		${IfNot} ${Errors}
			${If} $0 == "find"
			${OrIf} $0 == "require"
				${WriteDefineConfig} "JAVA" ""
			${EndIf}
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "XML"
		${IfNot} ${Errors}
			${WriteDefineConfig} "XML_PLUGIN" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "Ghostscript"
		${IfNot} ${Errors}
			${WriteDefineConfig} "GHOSTSCRIPT" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "FontsFolder"
		${IfNot} ${Errors}
			${WriteDefineConfig} "FONTS_ENABLE" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "FileCleanup"
		${IfNot} ${Errors}
			${WriteDefineConfig} "FileCleanup" ""
		${EndIf}
		ClearErrors
		${ReadWrapperConfig} $0 "Activate" "DirectoryCleanup"
		${IfNot} ${Errors}
			${WriteDefineConfig} "DirectoryCleanup" ""
		${EndIf}
		
		FileClose $DEFINES
		
		${If} ${FileExists} "$PACKAGE\App\Readme.txt"
			Delete "$PACKAGE\App\Readme.txt"
		${EndIf}
		${If} ${FileExists} "$PACKAGE\help.html"
			Delete "$PACKAGE\help.html"
		${EndIf}	
		${If} ${FileExists} "$PACKAGE\App\AppInfo\eula.txt"
			Rename "$PACKAGE\App\AppInfo\eula.txt" "$PACKAGE\App\AppInfo\eula.txt.temp"
			Rename "$PACKAGE\App\AppInfo\eula.txt.temp" "$PACKAGE\App\AppInfo\EULA.txt"
		${EndIf}
		${If} ${FileExists} "$PACKAGE\App\DefaultData\*.*"
			${ConvertPath} "App\DefaultData" "App\DefaultSettings"
		${EndIf}
		${If} ${FileExists} "$PACKAGE\Other\*.*"
			${If} ${FileExists} "$PACKAGE\Other\Help\*.*"
				RMDir /r "$PACKAGE\Other\Help"
			${EndIf}
			${IfNot} ${FileExists} "$PACKAGE\bin\*.*"
				CreateDirectory "$PACKAGE\bin"
			${EndIf}
			${IfNot} ${FileExists} "$PACKAGE\etc\*.*"
				CreateDirectory "$PACKAGE\etc"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\Source\PortableApps.comInstallerCustom.nsh"
				${ConvertPath} "Other\Source\PortableApps.comInstallerCustom.nsh" "App\AppInfo\ExtendedInstaller.nsh"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\Source\$AppID.ini"
				${ConvertPath} "Other\Source\$AppID.ini" "etc\$AppID.ini"
				Delete "$PACKAGE\Other\Source\$AppID.ini"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\Source\Readme.txt"
				${ConvertPath} "Other\Source\Readme.txt" "etc\README"
				Delete "$PACKAGE\Other\Source\Readme.txt"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\notes.txt"
				${ConvertPath} "Other\notes.txt" "etc\NOTES"
				Delete "$PACKAGE\Other\notes.txt"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\*.nsi"
				${ConvertPath} "Other\*.nsi" "etc\*.nsi"
				Delete "$PACKAGE\Other\*.nsi"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\*.png"
				${ConvertPath} "Other\*.png" "etc\*.png"
				Delete "$PACKAGE\Other\*.png"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\Source\LauncherLicense.txt"
				Delete "$PACKAGE\Other\Source\LauncherLicense.txt"
			${EndIf}
			${If} ${FileExists} "$PACKAGE\Other\Source\COPYING"
				Delete "$PACKAGE\Other\Source\COPYING"
			${EndIf}
			${IfNot} ${FileExists} "$PACKAGE\etc\UNLICENSE"
				CopyFiles /SILENT "$EXEDIR\etc\UNLICENSE" "$PACKAGE\etc\UNLICENSE"
			${EndIf}
			CopyFiles /SILENT "App\Other\*.*" "$PACKAGE\etc"
			RMDir /r "$PACKAGE\Other"
			Rename "$PACKAGE\App" "$PACKAGE\AppTemp"
			Rename "$PACKAGE\AppTemp" "$PACKAGE\app"
			Rename "$PACKAGE\App\AppInfo\appinfo.ini" "$PACKAGE\App\AppInfo\appinfo.ini.temp"
			Rename "$PACKAGE\App\AppInfo\appinfo.ini.temp" "$PACKAGE\App\AppInfo\AppInfo.ini"
			Rename "$PACKAGE\App\AppInfo\appicon.ico" "$PACKAGE\App\AppInfo\appicon.ico.temp"
			Rename "$PACKAGE\App\AppInfo\appicon.ico.temp" "$PACKAGE\App\AppInfo\AppIcon.ico"
			Rename "$PACKAGE\App\AppInfo\appicon_16.png" "$PACKAGE\App\AppInfo\appicon_16.png.temp"
			Rename "$PACKAGE\App\AppInfo\appicon_16.png.temp" "$PACKAGE\App\AppInfo\AppIcon_16.png"
			Rename "$PACKAGE\App\AppInfo\appicon_32.png" "$PACKAGE\App\AppInfo\appicon_32.png.temp"
			Rename "$PACKAGE\App\AppInfo\appicon_32.png.temp" "$PACKAGE\App\AppInfo\AppIcon_32.png"
			Rename "$PACKAGE\App\AppInfo\appicon_128.png" "$PACKAGE\App\AppInfo\appicon_128.png.temp"
			Rename "$PACKAGE\App\AppInfo\appicon_128.png.temp" "$PACKAGE\App\AppInfo\AppIcon_128.png"
		${EndIf}
	
		StrCpy $2 ""
		; See if we need to enable XML
		ReadINIStr $3 "${_}\App\AppInfo\CompilerWrapper.ini" Activate XML
		${If} $3 == true
			StrCpy $2 "$2 /DXML_ENABLED"
		${EndIf}

		; See if we need to use the RequestExecutionLevel admin
		ReadINIStr $3 "${_}\App\AppInfo\CompilerWrapper.ini" Launch RunAsAdmin
		${If} $3 == compile-force
			StrCpy $2 "$2 /DRUNASADMIN_COMPILEFORCE"
		${EndIf}
		
		; See if automatic signing is requested
		ReadINIStr $3 "${_}\App\AppInfo\AppInfo.ini" Team CertSigning
		${If} $3 == true
			StrCpy $2 "$2 /DCertificate"
			ReadINIStr $4 "${_}\App\AppInfo\AppInfo.ini" Team CertExtension
			StrCpy $2 "$2 /DCertExtension=$4"
			ReadINIStr $5 "${_}\App\AppInfo\AppInfo.ini" Team CertTimestamp
			StrCpy $2 "$2 /DCertTimestamp=$5"
		${EndIf}
		
	${EndIf}

	${If} $ERROROCCURED != true
		; Build the thing
		ExecDos::exec `"$NSIS" /O"$EXEDIR\bin\PortableAppsCompilerLog.txt" /DPACKAGE="$PACKAGE" /DNamePortable="$Name" /DAppID="$AppID" /DVersion="$1"$2 "$EXEDIR\etc\source\PortableAppsCompiler.nsi"` "" ""
		Pop $R1
		${If} $R1 <> 0
			StrCpy $ERROROCCURED true
			${WriteErrorLog} "MakeNSIS exited with status code $R1"
		${EndIf}
	${EndIf}

	SetDetailsPrint ListOnly

	DetailPrint " "
	DetailPrint "Processing complete."
	${If} ${FileExists} $PACKAGE\$AppID.exe
		StrCpy $FINISHTITLE "Wrapper Created"
		StrCpy $FINISHTEXT "The wrapper has been created. Wrapper location:\r\n$PACKAGE\r\n\r\nWrapper name:\r\n$AppID.exe" 
	${Else}
		StrCpy $FINISHTITLE "An Error Occurred"
		StrCpy $FINISHTEXT "The wrapper was not created. You can view the log file for more information."
		StrCpy $ERROROCCURED true
	${EndIf}
SectionEnd
Function ShowFinishPage
	${If} $AUTOMATICCOMPILE == "true"
	${AndIf} $ERROROCCURED != true
		Abort
	${Else}
		${If} $ERROROCCURED == true
			!insertmacro MUI_INSTALLOPTIONS_WRITE "ioSpecial.ini" "Field 4" "Flags" "DISABLED"
			!insertmacro MUI_INSTALLOPTIONS_WRITE "ioSpecial.ini" "Field 5" "State" "1"
		${EndIf}
	${EndIf}
FunctionEnd
Function RunOnFinish
	Exec $PACKAGE\$AppID.exe
FunctionEnd
Function .onGUIEnd
	RealProgress::Unload
FunctionEnd
